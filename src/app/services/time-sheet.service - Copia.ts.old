import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import Logger, { DateUty } from '../Utility/Utility';
import { Workday, ElasticWorkdayDto } from './model';
import { BehaviorSubject } from 'rxjs';
import {Client} from 'elasticsearch-browser';


@Injectable()
export class TimeSheetService {

  private timeSheets = new BehaviorSubject<Workday[]>([]);
  private client: Client;

  queryalldocs = {
    query: {
      match_all: {}
    },
  };


  constructor(private http: HttpClient) {
    Logger.logInfo('TimeSheetService ' + ' creato ');
    if (!this.client) {
      this.connect();
    }
    this.loadFromElastic();
  }

  private connect() {
    this.client = new Client({
      host: 'localhost:9200',
      log: 'trace',
      apiVersion: '7.5', // use the same version of your Elasticsearch instance
    });
  }

  /**
   * 
   */
  getTimeSheets() {
    return this.timeSheets.asObservable();
  }

  /**
   *
   */
  loadFromElastic() {
    Logger.logInfo('TimeSheetService - loadFromElastic');
    this.getAllDocuments();
  }

  getAllDocuments(): any {
    this.client.search({
          index: 'melky_timesheet_demo_1',
          body: this.queryalldocs
     }).then(
       (resp) => {
         Logger.logDebug('TimeSheetService - getAllDocuments - body:' + JSON.stringify(resp));
         const arrayList: Array<Workday> = resp.hits.hits.map(elem => {
           const workday: Workday = elem._source;
           workday._id = elem._id;
           return workday;
         });
         Logger.logDebug('TimeSheetService - getAllDocuments - arrayList');
         this.timeSheets.next(arrayList);
       },
       (err) => {
         Logger.logDebug('TimeSheetService - getAllDocuments - err:' + JSON.stringify(err));
       }
    );
}


  insertElastic() {
    Logger.logInfo('TimeSheetService - insertElastic');
    const payload = {
      entrance: '2020-01-01T08:55:59+01:00', permission: '1', workable: '8', worked: '',
      exit: '2020-01-01T18:55:59+01:00', difference: '', balance: '', negative: ''
    };
  //   const url = 'http://localhost:9200/melky_timesheet_demo_1/_doc';
  //   return this.http.post(url, JSON.stringify(payload), {
  //     headers: { 'Content-Type': 'application/json' },
  //     // observe: 'response',
  //     // withCredentials: true
  //   });
    this.client.index({
      index: 'melky_timesheet_demo_1',
      refresh: 'wait_for',
      body: payload
    }).then(
      (resp) => {
        Logger.logDebug('TimeSheetService - insertElastic - body:' + JSON.stringify(resp));
        this.loadFromElastic();
      },
      (err) => {
        Logger.logDebug('TimeSheetService - insertElastic - err:' + JSON.stringify(err));
      }
    );


  }


  // /**
  //  *  Load workdays
  //  */
  // loadWorkdays() {
  //   Logger.logInfo('TimeSheetService - loadWorkdays');
  //   // this.http.get<Workday[]>('/api/timeSheets')
  //   //   .subscribe((timeSheetsDb) => {
  //   //     this.timeSheets.next(timeSheetsDb);
  //   //   });
  //   this.loadFromElastic();
  // }

  /**
   *
   */
  addWorkday(elem: Workday) {
    Logger.logInfo('TimeSheetService - addDayDetail');
    this.http.post<Workday[]>('/api/timeSheets', elem)
      .subscribe((response) => {
      });
  }

  /**
   * 
   * @param workday 
   */
  updateWorkday(workday: Workday) {
    Logger.logInfo('TimeSheetService - updateWorkday - workday: ' + JSON.stringify(workday));
    // const url = '/api/timeSheets/' + elem.id;
    // this.http.post(url, elem)
    //   .subscribe((response) => {
    //   });

    // const upadtePayload = 'script: ctx._source.exit=' +  '2020-02-02T20:55:59+01:00;ctx._source.balance= 10;';
    // const url = 'http://localhost:9200/melky_timesheet_demo_1/_update/' + workday._id + '?refresh=wait_for';
    // this.http.post(url, upadtePayload, {
    //   headers: { 'Content-Type': 'application/json' }
    //     })
    //   .subscribe(
    //     data => {
    //       Logger.logDebug('TimeSheetService - deleteWorkday - workday:' + JSON.stringify(workday));
    //       this.loadFromElastic();
    //     },
    //     error => {
    //       Logger.logDebug('TimeSheetService - deleteWorkday - error:' + JSON.stringify(error));
    //     }
    //   );

    const idTemp = workday._id;
    delete workday._id;

    this.client.index({
      index: 'melky_timesheet_demo_1',
      refresh: 'wait_for',
      id: idTemp,
      body: workday
    }).then(
      (resp) => {
        Logger.logDebug('TimeSheetService - updateWorkday - body:' + JSON.stringify(resp));
        this.loadFromElastic();
      },
      (err) => {
        Logger.logDebug('TimeSheetService - updateWorkday - err:' + JSON.stringify(err));
      }
    );
  }

  /**
   *
   * @param workday 
   */
  deleteWorkday(workday: Workday) {
    Logger.logInfo('TimeSheetService - deleteWorkday - workday: ' + JSON.stringify(workday));
    // // const url = '/api/timeSheets/' + elem.id;
    // const url = 'http://localhost:9200/melky_timesheet_demo_1/_doc/' + workday._id + '?refresh=wait_for';
    // this.http.delete<Workday>(url)
    //   .subscribe(
    //     data => {
    //       Logger.logDebug('TimeSheetService - deleteWorkday - workday:' + JSON.stringify(workday));
    //       this.loadFromElastic();
    //     },
    //     error => {
    //       Logger.logDebug('TimeSheetService - deleteWorkday - error:' + JSON.stringify(error));
    //     }
    //   );
    this.client.delete({
      index: 'melky_timesheet_demo_1',
      // type: 'mytype',
      id: workday._id,
      refresh: 'wait_for'
    }).then(
      (resp) => {
        Logger.logDebug('TimeSheetService - deleteWorkday - body:' + JSON.stringify(resp));
        this.loadFromElastic();
      },
      (err) => {
        Logger.logDebug('TimeSheetService - deleteWorkday - err:' + JSON.stringify(err));
      }
   );
  }

}

  // /**
  //  *  
  //  */
  // loadFromElastic() {
  //   Logger.logInfo('TimeSheetService - loadFromElastic');
  //   const reqBody = {
  //     query: {
  //       match_all: {}
  //      }
  //   };
  //   const body2 = JSON.stringify(reqBody);
  //   const headers2 =
  //     new HttpHeaders({
  //       'Content-Type': 'application/json'
  //   });
  //   const httpOptions = {
  //     headers: headers2,
  //     body: body2
  //   };
  //   const url = 'http://localhost:9200/melky_timesheet_demo_1/_search';
  //   return  this.http.get<ElasticWorkdayDto>(url, httpOptions).subscribe(
  //     data => {
  //       Logger.logDebug('TimeSheetService - loadFromElastic - data.hits.total:' + JSON.stringify(data.hits.total));
  //       const arrayList: Array<Workday> = data.hits.hits.map( elem => {
  //         const workday: Workday =  elem._source;
  //         workday._id = elem._id;
  //         return workday;
  //       });
  //       Logger.logDebug('TimeSheetService - loadFromElastic - arrayList');
  //       this.timeSheets.next(arrayList);
  //     },
  //     error => {
  //       Logger.logDebug('TimeSheetService - loadFromElastic - error:' + JSON.stringify(error));
  //     }
  //   );
  // }
